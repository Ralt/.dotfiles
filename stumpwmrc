;;;; -*- Mode: Lisp -*-

(in-package :stumpwm)

(ql:quickload 'swank)
(swank-loader:init)
(defcommand swank () ()
  (setf stumpwm:*top-level-error-action* :break)
  (swank:create-server :port 4005
                       :style swank:*communication-style*
                       :dont-close t))
(swank)

;(stumpwm:run-shell-command "set_resolution")
(stumpwm:run-shell-command "setkeyboard &")
(stumpwm:run-shell-command "xscreensaver &")
(stumpwm:run-shell-command "xmodmap /home/florian/.Xmodmap")

;; how many seconds elapse between each update of the modeline
;(setf *mode-line-timeout* 1) ; must be set *before* turning on the modeline
;(mode-line)

;; Turn on the modeline
;(if (not (head-mode-line (current-head)))
;     (toggle-mode-line (current-screen) (current-head)))

(defcommand my/toggle-mode-line () ()
  "toggle the modeline"
  (toggle-mode-line (current-screen) (current-head)))

;; Show time, cpu usage and network traffic in the modeline
(setf *screen-mode-line-format*
      (list '(:eval (run-shell-command "date '+%R, %F %a'|tr -d [:cntrl:]" t)) " [^B%n^b] %W"))

(defcommand google-chrome () ()
  "run google chrome"
  (run-or-raise "google-chrome" '(:class "Google-chrome")))

(defcommand chromium-browser () ()
  "run chromium-browser"
  (run-or-raise "chromium-browser" '(:class "Chromium-browser")))

(defcommand hipchat () ()
  "run hipchat"
  (run-or-raise "hipchat" '(:instance "hipchat")))

(defcommand skype () ()
  "run skype"
  (run-or-raise "skype" '(:instance "skype")))

;; Shortcut to lock the screen
(defcommand lock () ()
  "lock the screen"
  (run-or-raise "xscreensaver-command -lock" '(:instance "xscreensaver")))

(defcommand veille () ()
  "puts the pc in veille"
  (run-shell-command "veille"))

(defcommand emacs () ()
  "run emacs"
  (run-or-raise "emacs" '(:title "emacs")))

(defcommand screenshot () ()
  "screenshot"
  (run-shell-command "gnome-screenshot"))

(defcommand screenshot-area () ()
  "screenshot-area"
  (run-shell-command "gnome-screenshot -a"))

(defcommand poweroff () ()
  "poweroff"
  (run-shell-command "sudo poweroff"))

(defcommand reboot () ()
  "reboot"
  (run-shell-command "sudo reboot"))

(defcommand term () ()
  "xterm"
  (run-shell-command "gnome-terminal"))

(define-key *root-map* (kbd "x") "term")
(define-key *root-map* (kbd "c") "google-chrome")

(loop for i from 1 to 9
     do (define-key
            *top-map*
            (kbd (format nil "s-~d" i))
            (format nil "select-window-by-number ~d" i)))

(define-key *root-map* (kbd "C-t") "windowlist")

;; Navigation
(define-key *top-map* (kbd "s-ESC") "gother")
(define-key *top-map* (kbd "s-n") "next")

(define-key *top-map* (kbd "s-#") "screenshot")
(define-key *top-map* (kbd "s-$") "screenshot-area")


;;; Window Appearance
;; The width in pixels given to the borders of regular windows.
(setf *normal-border-width* 1)
;; The width in pixels given to the borders of windows with maxsize or ratio hints.
(setf *maxsize-border-width* 1)
;; The width in pixels given to the borders of transient or pop-up windows.
(setf *transient-border-width* 1)

(setf *mouse-focus-policy* :sloppy) ;; :click, :ignore, :sloppy

(setf *window-number-map* "1234567890")
(setf *frame-number-map* "1234567890")

(define-key *top-map* (kbd "s-`") "other")

(ql:quickload 'simpletray)

(defcommand tray-create-and-nm () ()
  "creates a tray and puts nm-applet on it"
  (simpletray:create)
  (run-shell-command "nm-applet &"))

(defcommand tray-destroy () ()
  "destroys the tray"
  (simpletray:destroy))

(defcommand setkeyboard () ()
  "sets the keyboard"
  (run-shell-command "setkeyboard"))

;(stumpwm:run-shell-command "gnome-sound-applet &")
;(stumpwm:run-shell-command "gnome-settings-daemon &")

;; Volume controls
(define-keysym #x1008ff11 "XF86AudioLowerVolume")
(define-keysym #x1008ff12 "XF86AudioMute")
(define-keysym #x1008ff13 "XF86AudioRaiseVolume")
;; Volume control
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioLowerVolume") "exec amixer set Master 5%-")
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioRaiseVolume") "exec amixer set Master 5%+")
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioMute") "exec /home/florian/bin/domute.sh")

(defun read-file (file)
  (let ((fields (make-hash-table :test #'equal)))
    (with-open-file (f file)
      (do ((line (read-line f nil nil) (read-line f nil nil)))
          ((null line) fields)
        (let ((split (cl-ppcre:split ":\\s*" line)))
          (setf (gethash (string-trim '(#\Space) (car split)) fields)
                (string-trim '(#\Space) (cadr split))))))
    (first (alexandria:hash-table-keys fields))))

(defcommand battery () ()
  "shows battery usage"
  (message "~A ~A%" (read-file "/sys/class/power_supply/BAT0/status") (read-file "/sys/class/power_supply/BAT0/capacity")))

(defcommand head-windowlist () ()
  "shows the list of windows on a single head"
  (select-window-from-menu
   (head-windows (current-group) (current-head))
   *window-format*))

(define-key *root-map* (kbd "C-r") "head-windowlist")
