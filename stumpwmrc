;;;; -*- Mode: Lisp -*-

(in-package :stumpwm)

(ql:quickload 'swank)
(swank-loader:init)
(defcommand swank () ()
  (setf stumpwm:*top-level-error-action* :break)
  (swank:create-server :port 4005
                       :style swank:*communication-style*
                       :dont-close t)
  (echo-string (current-screen)
               "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm)."))
(swank)

(stumpwm:run-shell-command "set_resolution")
(stumpwm:run-shell-command "setxkbmap -option ctrl:nocaps")

;; how many seconds elapse between each update of the modeline
(setf *mode-line-timeout* 1) ; must be set *before* turning on the modeline
(mode-line)

;; Turn on the modeline
(if (not (head-mode-line (current-head)))
     (toggle-mode-line (current-screen) (current-head)))

;; Show time, cpu usage and network traffic in the modeline
(setf *screen-mode-line-format*
      (list '(:eval (run-shell-command "date '+%R, %F %a'|tr -d [:cntrl:]" t)) " [^B%n^b] %W"))

(stumpwm:set-prefix-key (stumpwm:kbd "C-t"))

(defun banish-on-focus (cur last)
  (declare (ignore last))
  (multiple-value-bind (x y)
      (xlib:global-pointer-position *display*)
    (unless (eq cur (find-frame (current-group) x y))
      (banish))))

(add-hook *focus-frame-hook* 'banish-on-focus)

(defcommand google-chrome () ()
  "run google chrome"
  (run-or-raise "google-chrome" '(:class "Google-chrome")))

(defcommand lock () ()
  "locks the pc"
  (run-shell-command "lock"))

(defcommand veille () ()
  "puts the pc in veille"
  (run-shell-command "veille"))

(defcommand emacs () ()
  "run emacs"
  (run-or-raise "emacs" '(:title "emacs")))

(defcommand screenshot () ()
  "screenshot"
  (run-shell-command "gnome-screenshot"))

(defcommand screenshot-area () ()
  "screenshot-area"
  (run-shell-command "gnome-screenshot -a"))

(define-key *top-map* (kbd "s-1") "google-chrome")
(define-key *top-map* (kbd "s-2") "emacs")

(define-key *top-map* (kbd "s-#") "screenshot")
(define-key *top-map* (kbd "s-$") "screenshot-area")

;;; Window Appearance
;; The width in pixels given to the borders of regular windows.
(setf *normal-border-width* 1)
;; The width in pixels given to the borders of windows with maxsize or ratio hints.
(setf *maxsize-border-width* 1)
;; The width in pixels given to the borders of transient or pop-up windows.
(setf *transient-border-width* 1)

(setf *mouse-focus-policy* :sloppy) ;; :click, :ignore, :sloppy

(setf *window-number-map* "1234567890")
(setf *frame-number-map* "1234567890")
